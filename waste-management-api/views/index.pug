extends layout.pug
  

  
block content


      if message
        .alert.alert-success.alert-dismissible.fade.show(role="alert")
          h4.alert-heading Success Heading
          p #{message}
          
            
      #map(style='position: absolute; top: 0; bottom: 0; width: 100%;') 

      // Collection Point Popup element used to show feature details
      div#popup(style="z-index: 10; touch-action: none; max-height: 80vh; overflow-x: hidden; overflow-y: auto; box-sizing: border-box; padding: 0; margin: 0;")
      
      // Collection Point Card element used to show the donut chart for waste weight
      div.card.card-bottom-center(style='display: none;')
        .card-body
          h5.card-title-charts Waste Weight
              #donutChart.echart(style='min-height: 190px; bottom: 10px;')
      
      
      script.
        // *** SOURCES AND LAYERS ***
        // Create an empty source for the treatment sites layer      
        const treatmentSitesSource = new ol.source.Vector();
        const treatmentSitesLayer = new ol.layer.Vector({
          title: 'treatment_sites',
          source: treatmentSitesSource,
          style: function (feature) {
            return new ol.style.Style({
              image: new ol.style.RegularShape({
                points: 3,
                radius: 15,
                fill: new ol.style.Fill({ color: 'black' }),
                stroke: new ol.style.Stroke({
                  color: 'rgba(225, 225, 225, 1)',
                  width: 1,
                }),
              }),
            });
          },
        });

        // Create an empty source for the collection points layer
        const collectionPointsSource = new ol.source.Vector();
        const collectionPointsLayer = new ol.layer.Vector({
          title: 'collection_points',
          source: collectionPointsSource,
          style: function (feature) {
            const average_weight = feature.get('average_weight');
            const radius = average_weight ? 3 + (average_weight / 100) * 5 : 5;
            return new ol.style.Style({
              image: new ol.style.Circle({
                radius: radius,
                fill: new ol.style.Fill({ color: 'rgba(230, 57, 70, 1)' }),
                stroke: new ol.style.Stroke({
                  color: 'rgba(225, 225, 225, 1)',
                  width: 1,
                }),
              }),
            });
          },
        });

        // Create the base layer with OpenStreetMap tiles
        const osmLayer = new ol.layer.Tile({
          title: 'OpenStreetMap',
          type: 'base',
          source: new ol.source.OSM(),
        });



        // *** STYLES ***
        // Define hover styles
        const treatmentHoverStyle = new ol.style.Style({
          image: new ol.style.RegularShape({
            points: 3,
            radius: 20,
            fill: new ol.style.Fill({ color: 'blue' }),
            stroke: new ol.style.Stroke({
              color: 'rgba(225, 225, 225, 1)',
              width: 1,
            }),
          }),
        });

        const collectionHoverStyle = function (feature) {
          const average_weight = feature.get('average_weight');
          const radius = average_weight ? 4 + (average_weight / 100) * 6 : 6;
          return new ol.style.Style({
            image: new ol.style.Circle({
              radius: radius,
              fill: new ol.style.Fill({ color: 'rgba(246, 114, 128, 1)' }),
              stroke: new ol.style.Stroke({
                color: 'rgba(225, 225, 225, 1)',
                width: 1,
              }),
            }),
          });
        };


        // *** MAP AND VIEW ***
        // Define the initial view of the map
        const view = new ol.View({
          center: ol.proj.fromLonLat([4.3872, 45.4397]),
          zoom: 13,
          projection: 'EPSG:3857',
        });

        // Create the map with the specified layers and view
        const map = new ol.Map({
          target: 'map',
          layers: [osmLayer,  treatmentSitesLayer, collectionPointsLayer],
          view: view,
        });

        // *** INTERACTIONS ***
        // Add hover interactions
        const treatmentHoverInteraction = new ol.interaction.Select({
          condition: ol.events.condition.pointerMove,
          layers: [treatmentSitesLayer],
          style: treatmentHoverStyle,
        });

        const collectionHoverInteraction = new ol.interaction.Select({
          condition: ol.events.condition.pointerMove,
          layers: [collectionPointsLayer],
          style: collectionHoverStyle,
        });

        map.addInteraction(treatmentHoverInteraction);
        map.addInteraction(collectionHoverInteraction);





        // *** OVERLAYS ***
        // Create a popup overlay for the map
        const popup = new ol.Overlay({
          element: document.getElementById('popup'),
          autoPan: true,
          autoPanAnimation: {
            duration: 250,
          },
        });
        map.addOverlay(popup);



        // *** EVENT HANDLERS ***
        // Add an event listener for single clicks
        map.on('singleclick', function (evt) {
          map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {

            console.log(layer);

            if (feature) {
              const coordinates = feature.getGeometry().getCoordinates();

              // Center the map on the clicked feature
              const size = map.getSize();
              const resolution = view.getResolution();
              const newCenter = [
                coordinates[0] + (-size[1] / 8) * resolution,
                coordinates[1] + (-size[1] / 3.5) * resolution
              ];
              view.animate({ center: newCenter });

              // Fetch the HTML content from the external file
              let fetchUrl;
              if (layer === treatmentSitesLayer) {
                  fetchUrl = '/assets/treatment-sites-popup.html';  // Replace with your HTML file for treatment sites
              } else if (layer === collectionPointsLayer) {
                  fetchUrl = '/assets/collection-point-popup.html'; // Replace with your HTML file for collection points
              }


              fetch(fetchUrl)
                .then(response => response.text())
                .then(html => {
                  // Replace placeholders in the HTML content with feature properties
                  let content = html
                                  .replace(/{{id}}/g, feature.get('id'))
                                  .replace(/{{code}}/g, feature.get('code'))
                                  .replace(/{{name}}/g, feature.get('name'))
                                  .replace(/{{address_1}}/g, feature.get('address_1'))
                                  .replace(/{{postal_code}}/g, feature.get('postal_code'))
                                  .replace(/{{city}}/g, feature.get('city'))
                                  .replace(/{{total_bins}}/g, feature.get('total_bins'))
                                  .replace(/{{total_weight}}/g, feature.get('total_weight'))
                                  .replace(/{{service_status}}/g, feature.get('service_status'))
                                  .replace(/{{opening_date}}/g, feature.get('opening_date'))
                                  .replace(/{{closing_date}}/g, feature.get('closing_date'))
                                  .replace(/{{service_type_description}}/g, feature.get('service_type_description'))
                                  .replace(/{{longitude}}/g, feature.get('longitude'))
                                  .replace(/{{latitude}}/g, feature.get('latitude'));

                          const popupElement = popup.getElement();
                          popupElement.dataset.featureId = feature.get('id').toString();
                          popupElement.innerHTML = content;

                          popup.setPosition(coordinates);

                          // Show the card and update the donut chart
                          showCardWithDonutChart(feature);

                          // Make the popup draggable
                          $( function() {
                            $( "#popup" ).draggable();
                          } );

                          // Close button logic
                          document.querySelector('.btn-close').addEventListener('click', function() {
                            popup.setPosition(undefined);
                            document.querySelector(".card.card-bottom-center").style.display = "none";
                          });

                          // Add event listener for the edit form submission
                          document.getElementById('edit-form').addEventListener('submit', function(e) {
                            e.preventDefault();

                            const id = document.getElementById('edit-id').value;


                            let apiEndpoint;
                            if (layer === collectionPointsLayer) {
                              apiEndpoint = `/api/collectionpoints/${id}`;
                            } else if (layer === treatmentSitesLayer) {
                              apiEndpoint = `/api/treatmentsite/${id}`;  // Replace with your API endpoint for treatment sites
                            }

                            fetch(apiEndpoint, {
                              method: 'PUT',
                              headers: {
                                'Content-Type': 'application/json',
                              },
                              body: JSON.stringify({
                                // Include the values from the form here
                                id: document.getElementById('edit-id').value,
                                code: document.getElementById('edit-code').value,
                                name: document.getElementById('edit-name').value,
                                address: document.getElementById('edit-address').value,
                                postal_code: document.getElementById('edit-postal-code').value,
                                city: document.getElementById('edit-city').value,
                                service_status: document.getElementById('edit-service-status').value,
                                opening_date: document.getElementById('edit-opening-date').value,
                                closing_date: document.getElementById('edit-closing-date').value,
                                service_type_desc: document.getElementById('edit-service-type-description').value,
                                longitude: document.getElementById('edit-longitude').value,
                                latitude: document.getElementById('edit-latitude').value,
                                }),
                              })
                              .then(response => response.json())
                              .then(data => {
                                  console.log(data);
                                  // Show the alert message
                                  const alert = document.getElementById('success-alert');
                                alert.style.display = 'block';
                                // Hide the alert message after 5 seconds
                                  setTimeout(() => {
                                  alert.style.opacity = '0';
                                  setTimeout(() => {
                                    alert.style.display = 'none';
                                  }, 500);  // This should be the same as the duration of the CSS transition
                                }, 1000);  // This should be the same as the duration of the CSS transition + 500ms

                              })
                              .catch((error) => {
                                  console.error('Error:', error);
                              });
                            });

                          // Add event listener for the delete form submission
                          document.getElementById('delete-form').addEventListener('submit', function(e) {
                            e.preventDefault();

                            // Check if the checkbox is ticked
                            if (!document.getElementById('confirm-delete').checked) {
                              alert('You must confirm the deletion before proceeding.');
                              return;
                            }

                            const id = document.getElementById('edit-id').value;

                            let apiEndpoint;
                            if (layer === collectionPointsLayer) {
                              apiEndpoint = `/api/collectionpoints/${id}`;
                            } else if (layer === treatmentSitesLayer) {
                              apiEndpoint = `/api/treatmentsite/${id}`;  // Replace with your API endpoint for treatment sites
                            }

                            fetch(apiEndpoint, {
                              method: 'DELETE',
                            })
                            .then(response => response.json())
                            .then(data => {
                              console.log(data);
                              // Set the alert message
                              const alert = document.getElementById('success-alert');
                              alert.textContent = data.message;
                              alert.style.display = 'block';
                              // Hide the alert message after 5 seconds
                              setTimeout(() => {
                                alert.style.display = 'none';
                              }, 5000);
                              // Redirect to the index page
                              window.location.href = "/";
                            })
                            .catch((error) => {
                              console.error('Error:', error);
                            });
                          });
                        });
            } else {
              popup.setPosition(undefined);
              // Hide the card
              const cardElement = document.querySelector(".card.card-bottom-center");
              cardElement.style.display = "none";
            }
          })
        });

      



        
        // *** FUNCTIONS. INDICATORS AND CHARTS ***
        // Function to display the donut chart in the card
        function showCardWithDonutChart(feature) {
          const cardElement = document.querySelector(".card.card-bottom-center");
          cardElement.style.display = "block";  // Make the card visible

          // Get the waste data from the feature properties
          const totalWeight = feature.get('total_weight');
          const averageWeight = feature.get('average_weight');
          const minWeight = feature.get('min_weight');
          const maxWeight = feature.get('max_weight');

          // Initialize the chart with the data
          const donutChartElement = document.querySelector("#donutChart");
          const donutChart = echarts.init(donutChartElement);
          donutChart.setOption({
            color: ['#123456', '#789abc', '#def012', '#345678'],
            tooltip: { trigger: 'item' },
            legend: {
              top: '5%',
              bottom: '3%',
              left: 'center',
              itemWidth: 6,
              itemHeight: 6,
              textStyle: { rich: { fontSize: 7 } }
            },
            series: [{
              type: 'pie',
              radius: ['40%', '70%'],
              avoidLabelOverlap: false,
              label: {
                show: false,
                position: 'center'
              },
              emphasis: {
                label: {
                  show: true,
                  fontSize: '11',
                  fontWeight: 'bold'
                }
              },
              labelLine: {
                show: false
              },
              data: [
                { value: totalWeight, name: 'Total' },
                { value: averageWeight, name: 'Average' },
                { value: minWeight, name: 'Minimum' },
                { value: maxWeight, name: 'Maximum' }
              ]
            }]
          });
        }


      




















        //- // Add event listeners for pointer movement and pointer out events
        //- let selected = null;

        //- // Change style of the feature under the pointer
        //- map.on('pointermove', function (e) {
        //-     if (selected !== null) {
        //-         selected.setStyle(undefined);
        //-         selected = null;
        //-     }

        //-     map.forEachFeatureAtPixel(e.pixel, function (f) {
        //-         selected = f;
        //-         let style;
        //-         if (f.get('layer') === 'collection_points') {
        //-             style = collectionPointHoverStyle;
        //-         } else if (f.get('layer') === 'treatment_sites') {
        //-             style = treatmentSiteHoverStyle;
        //-         } else {
        //-             return;
        //-         }
        //-         f.setStyle(style);
        //-         return true;
        //-     });
        //- });

        //- // Reset style when pointer moves out of a feature
        //- map.on('pointerout', function () {
        //-     if (selected !== null) {
        //-         selected.setStyle(undefined);
        //-         selected = null;
        //-     }
        //- });

        // Define hover styles for collection points and treatment sites
        //- const collectionPointHoverStyle = new ol.style.Style({
        //-     image: new ol.style.Circle({
        //-         radius: 23,
        //-         fill: new ol.style.Fill({ color: 'rgba(120, 0, 0, 1)' }),
        //-     }),
        //- });

        //- const treatmentSiteHoverStyle = new ol.style.Style({
        //-     image: new ol.style.Circle({
        //-         radius: 23,
        //-         fill: new ol.style.Fill({ color: 'rgba(0, 120, 0, 1)' }),
        //-     }),
        //- });