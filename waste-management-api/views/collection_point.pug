li.nav-item
  a.nav-link.collapsed(href='#', data-bs-toggle='collapse', data-bs-target='#components-nav')
    i.bi.bi-geo-alt-fill
    span Collection points
    i.bi.bi-chevron-down.ms-auto
  ul#components-nav.nav-content.collapse(data-bs-parent='#sidebar-nav')
    li
      form.ml-3(id="filterForm")
        .row
          .col-md-6
            .form-check.form-option
              input.form-check-input(type="radio", name="collectionPointOption", id="optionId", value="id")
              label.form-check-label(for="optionId") ID
            .form-check.form-option
              input.form-check-input(type="radio", name="collectionPointOption", id="optionCode", value="code")
              label.form-check-label(for="optionCode") Postal Code
          .col-md-6
            .form-check.form-option
              input.form-check-input(type="radio", name="collectionPointOption", id="optionPostalCode", value="postal_code")
              label.form-check-label(for="optionPostalCode") Code
            .form-check.form-option
              input.form-check-input(type="radio", name="collectionPointOption", id="optionCity", value="city")
              label.form-check-label(for="optionCity") City
          .row
            .col-md-12
              .input-group.mt-2.form-option
                span.input-group-text#inputGroupPrepend2 Value
                input.form-control(type="text", id="filterValue", aria-describedby="inputGroupPrepend2", required)
                button.btn.btn-primary(type="submit")
                  i.bi.bi-check
    

script.
  // Fetch all data when the page loads
  fetchData();

  document.getElementById('filterForm').addEventListener('submit', function(event) {
    event.preventDefault();

    // Get the selected radio button value
    const radioButtonValue = document.querySelector('input[name="collectionPointOption"]:checked').value;

    // Get the filter value
    const filterValue = document.getElementById('filterValue').value;

    // Fetch the data
    fetchData(radioButtonValue, filterValue);
  });

  function fetchData(radioButtonValue = null, filterValue = null) {
    // Fetch GeoJSON data from the map file's WMS server
    const wmsUrl = 'http://localhost/cgi-bin/mapserv?';
    const wmsParams = new URLSearchParams({
      map: '/home/dan/wastemanagement-project/postgis_data_visualization.map',
      service: 'WFS',
      version: '1.1.0',
      request: 'GetFeature',
      typename: 'collection_points',
      srsname: 'EPSG:4326',
      outputFormat: 'geojson',
    });

    // Only add the CQL_FILTER if both radioButtonValue and filterValue are not null
    if (radioButtonValue && filterValue) {
      wmsParams.set('FILTER', filterValue);
    }

    const url = `${wmsUrl}${wmsParams.toString()}`;

    fetch(url)
      .then(function (response) {
        if (!response.ok) {
          throw new Error(`HTTP error ${response.status}`);
        }
        return response.text();
      })
      .then(function (text) {
        const data = JSON.parse(text);
        const features = new ol.format.GeoJSON().readFeatures(data, {
          featureProjection: 'EPSG:3857',
        });
        collectionPointsSource.clear(); // Clear the existing features
        collectionPointsSource.addFeatures(features); // Add the new features
      })
      .catch(function (error) {
        console.error('Error fetching GeoJSON data:', error);
      });
  }
