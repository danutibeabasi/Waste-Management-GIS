li.nav-item
          a.nav-link.collapsed(href='/map?layer=treatment_sites', data-bs-toggle='collapse', data-bs-target='#forms-nav')
            i.bi.bi-buildings
            span Treatment Sites
            i.bi.bi-chevron-down.ms-auto
          ul#forms-nav.nav-content.collapse(data-bs-parent='#sidebar-nav')
            li
              // Add form links here
              a(href="/api/treatmentsites/create")
                i.bi.bi-circle
                span Create Treatment site

            li 
              a(href="#")
                i.bi.bi-circle
                span Filter Points
            li 
              div.form-filter
                form.ml-5(id="treatmentFilterForm")
                  .row
                    .col-md-12
                      .input-group.mt-2.form-option
                        .col-md-4
                          select#treatmentFilterOptions.form-control(name="filterType")
                            option(value="id") ID
                            option(value="code") Code
                            option(value="postal_code") Postal Code
                            //- option(value="city") City
                        .col-md-5
                          input.form-control(type="text", id="treatmentFilterValue", aria-describedby="inputGroupPrepend2", required)
                        .col-md-3  
                          button.btn.btn-primary(type="submit")
                            i.bi.bi-check-circle
script.

  async function isPostalCodeExist(filterValue) {
    const result = await db.manyOrNone('SELECT * FROM treatment_sites WHERE postal_code = $1', [filterValue]);
    return result.rows.length > 0;
    }

  // Fetch all data when the page loads
  fetchData('treatment_sites');

  const treatmentFilterForm = document.getElementById('treatmentFilterForm');
  treatmentFilterForm.addEventListener('submit', function(event) {
    event.preventDefault();

    // Get the selected option value
    const filterType = document.getElementById('treatmentFilterOptions').value;
    const filterValue = document.getElementById('treatmentFilterValue').value;

    // Validation
    if (filterType === 'id' && isNaN(filterValue)) {
      alert('Please enter a valid ID');
      return;
    }

    if (filterType === 'code' && !/^[a-zA-Z0-9]+$/.test(filterValue)) {
      alert('Code must be alphanumeric');
      return;
    }

    if (filterType === 'postal_code') {
      if (isNaN(filterValue) || filterValue.length !== 5) {
        alert('Please enter a valid Postal Code');
        return;
      } else if (!isPostalCodeExist(filterValue)) {
        alert('Postal Code does not exist in the system');
        return;
      }
    }


    if (filterType === 'city' && !/^[a-zA-Z\s]+$/.test(filterValue)) {
      alert('City must only contain letters');
      return;
    }

    if (!filterValue) {
      alert('Please enter a filter value');
      return;
    }

    // Fetch the data
    fetchData('treatment_sites', filterType, filterValue);
  });

  function fetchData(layerName = 'treatment_sites', filterType = null, filterValue = null) {
    const wmsUrl = 'http://localhost/cgi-bin/mapserv?';
    const wmsParams = new URLSearchParams({
      map: '/home/dan/wastemanagement-project/postgis_data_visualization.map',
      service: 'WFS',
      version: '1.1.0',
      request: 'GetFeature',
      typename: layerName,
      srsname: 'EPSG:4326',
      outputFormat: 'geojson',
    });

    const url = `${wmsUrl}${wmsParams.toString()}`;

    console.log('Fetching data with URL:', url); // Log the request URL

    fetch(url)
      .then(function (response) {
        if (!response.ok) {
          throw new Error(`HTTP error ${response.status}`);
        }
        return response.json();
      })
      .then(function (data) {
        console.log('Received data:', data); // Log the received data
        const features = new ol.format.GeoJSON().readFeatures(data, {
          featureProjection: 'EPSG:3857',
        });

        let filteredFeatures = features;

        // Apply the filter if provided
        if (filterType && filterValue) {
          filteredFeatures = features.filter(feature => {
            const propertyValue = feature.get(filterType);
            return propertyValue && propertyValue.toString() === filterValue;
          });
        }

        // Close the popup if it's open and its feature is not in the filtered features
        const popupElement = popup.getElement();
        const popupFeatureId = popupElement.dataset.featureId;
        if (popupFeatureId) {
          const popupFeature = features.find(feature => feature.get('id').toString() === popupFeatureId);
          if (!filteredFeatures.includes(popupFeature)) {
            popup.setPosition(undefined);
          }
        }

        console.log('Parsed features:', filteredFeatures); // Log the parsed features
        treatmentSitesSource.clear(); // Clear the existing features
        treatmentSitesSource.addFeatures(filteredFeatures); // Add the new features
      })
      .catch(function (error) {
        console.error('Error fetching GeoJSON data:', error);
      });
  } 
